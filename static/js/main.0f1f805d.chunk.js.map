{"version":3,"sources":["App.js","components/display/Display.js","components/buttonContainer/Buttons.js","reportWebVitals.js","index.js"],"names":["App","useState","displayText","setDisplayText","history","setHistory","total","setTotal","calculatorOn","setCalculatorOn","handleOnButtonClick","buttonValue","ttl","eval","extra","Math","ceil","random","str","slice","className","style","textAlign","color","margin","txtDisp","buttonClick","onClick","Display","buttons","Buttons","map","item","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ukCAQMA,IAAM,SAANA,MAAY,cAEqBC,oDAAS,IAF9B,yOAEVC,YAFU,cAEGC,eAFH,yBAGaF,oDAAS,IAHtB,0OAGVG,QAHU,cAGDC,WAHC,yBAISJ,sDAJT,0OAIVK,MAJU,cAIHC,SAJG,yBAKuBN,qDAAS,GALhC,0OAKVO,aALU,cAKIC,gBALJ,cAQXC,oBAAsB,SAAtBA,oBAAsBC,aAM3B,GALIL,OACHC,SAAS,MAIU,MAAhBI,YAAqB,CACxB,IAAMC,IAAMC,KAAKX,aAGbY,MAAQC,KAAKC,KAAqB,GAAhBD,KAAKE,UAQ3B,OAPIH,MAAQ,IACXA,MAAQ,GAGTP,SAASK,IAAME,OACfT,WAAWH,kBACXC,eAAe,IAKhB,GAAoB,MAAhBQ,YAAqB,CACxB,IAAMO,IAAMhB,YAAYiB,MAAM,GAAI,GAClC,OAAOhB,eAAee,KAIvB,MAAoB,OAAhBP,YACIR,eAAe,IAKH,QAAhBQ,YACIF,iBAAgB,QAIxBN,eAAeD,YAAcS,cAG9B,OACC,mEAAKS,UAAU,MAAf,UACC,iEAAIC,MAAO,CAAEC,UAAW,SAAUC,MAAO,QAAzC,8BACA,kEAAKH,UAAU,YAAf,SACC,mEAAKA,UAAU,aAAf,UACC,kEAAKC,MAAO,CAAEC,UAAW,QAASE,OAAQ,QAA1C,SACElB,OAASF,UAEX,2DAAC,2DAAD,CAASqB,QAASvB,YAAaI,MAAOA,MAAOF,QAASA,UAErDI,aACA,2DAAC,mEAAD,CAASkB,YAAahB,sBAEtB,qEAAQU,UAAU,QAAQO,QAAS,kBAAMlB,iBAAgB,IAAzD,yBAUST,2B,6BCjFf,wDAGa4B,EAAU,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,QAASnB,EAAY,EAAZA,MAClC,OAAO,qBAAKc,UAAU,QAAf,SAAwBd,GAASmB,GAAW,S,6BCJpD,wDAGMI,EAAU,CACf,KACA,IACA,MACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,IACA,KAGYC,EAAU,SAAC,GAAqB,IAAnBJ,EAAkB,EAAlBA,YACzB,OACC,qBAAKN,UAAU,UAAf,SACES,EAAQE,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAgBb,UAAU,SAASO,QAAS,kBAAMD,EAAYM,IAA9D,SACEA,GADWC,U,oKCjBFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC7C,EAAA,EAAD,MAEF8C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0f1f805d.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nimport { Display } from \"./components/display/Display\";\r\n\r\nimport { Buttons } from \"./components/buttonContainer/Buttons\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n\t//declare local variable for disply text\r\n\tconst [displayText, setDisplayText] = useState(\"\");\r\n\tconst [history, setHistory] = useState(\"\");\r\n\tconst [total, setTotal] = useState();\r\n\tconst [calculatorOn, setCalculatorOn] = useState(true);\r\n\r\n\t// receive value when button is clicked\r\n\tconst handleOnButtonClick = buttonValue => {\r\n\t\tif (total) {\r\n\t\t\tsetTotal(null);\r\n\t\t}\r\n\r\n\t\t// total and return\r\n\t\tif (buttonValue === \"=\") {\r\n\t\t\tconst ttl = eval(displayText);\r\n\r\n\t\t\t// make total prank\r\n\t\t\tlet extra = Math.ceil(Math.random() * 10);\r\n\t\t\tif (extra > 3) {\r\n\t\t\t\textra = 0;\r\n\t\t\t}\r\n\r\n\t\t\tsetTotal(ttl + extra);\r\n\t\t\tsetHistory(displayText);\r\n\t\t\tsetDisplayText(\"\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//backspace on C click\r\n\t\tif (buttonValue === \"C\") {\r\n\t\t\tconst str = displayText.slice(0, -1);\r\n\t\t\treturn setDisplayText(str);\r\n\t\t}\r\n\r\n\t\t//Empty Display on AC click\r\n\t\tif (buttonValue === \"AC\") {\r\n\t\t\treturn setDisplayText(\"\");\r\n\t\t}\r\n\r\n\t\t// Turn calculator off on OFF clicked\r\n\r\n\t\tif (buttonValue === \"OFF\") {\r\n\t\t\treturn setCalculatorOn(false);\r\n\t\t}\r\n\r\n\t\t// concat all the input value\r\n\t\tsetDisplayText(displayText + buttonValue);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: \"blue\" }}>Prank Calculator</h1>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"calculator\">\r\n\t\t\t\t\t<div style={{ textAlign: \"right\", margin: \"10px\" }}>\r\n\t\t\t\t\t\t{total && history}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Display txtDisp={displayText} total={total} history={history} />\r\n\r\n\t\t\t\t\t{calculatorOn ? (\r\n\t\t\t\t\t\t<Buttons buttonClick={handleOnButtonClick} />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<button className=\"btnOn\" onClick={() => setCalculatorOn(true)}>\r\n\t\t\t\t\t\t\tON\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport \"./display.style.css\";\r\n\r\nexport const Display = ({ txtDisp, total }) => {\r\n\treturn <div className=\"input\">{total || txtDisp || \".0\"}</div>;\r\n};\r\n","import React from \"react\";\r\nimport \"./buttons.style.css\";\r\n\r\nconst buttons = [\r\n\t\"AC\",\r\n\t\"C\",\r\n\t\"OFF\",\r\n\t7,\r\n\t8,\r\n\t9,\r\n\t4,\r\n\t5,\r\n\t6,\r\n\t1,\r\n\t2,\r\n\t3,\r\n\t0,\r\n\t\"/\",\r\n\t\"*\",\r\n\t\"-\",\r\n\t\"+\",\r\n\t\"=\",\r\n\t\".\",\r\n];\r\n\r\nexport const Buttons = ({ buttonClick }) => {\r\n\treturn (\r\n\t\t<div className=\"buttons\">\r\n\t\t\t{buttons.map((item, i) => (\r\n\t\t\t\t<button key={i} className=\"numBtn\" onClick={() => buttonClick(item)}>\r\n\t\t\t\t\t{item}\r\n\t\t\t\t</button>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}